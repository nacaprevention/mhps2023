{"version":3,"file":"component---src-templates-lga-template-js-14b841c2c3c1ac592312.js","mappings":"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","sources":["webpack://mappinghps2023/./src/components/TableData.js","webpack://mappinghps2023/./src/components/MappingUtils.js","webpack://mappinghps2023/./src/components/DataTable.js","webpack://mappinghps2023/./src/components/LgaMap.js","webpack://mappinghps2023/./src/templates/lgaTemplate.js"],"sourcesContent":["import * as d3 from 'd3';\nimport React, { useEffect, useRef } from 'react';\n\nexport const parseCSV = async (path) => {\n    const data = await d3.csv(path);\n    return data;\n};\n\nexport const filterDataByLga = (data, lga) => {\n    return data.filter(item => lga === 'All LGAs' || item.lga_name === lga);\n};\n","import React from 'react';\n\n\nexport const serviceToColumnMap = {\n    \"All Services\": \"serviceProviders\",\n    \"Condom Distribution\": \"CondomDistribution\",\n    \"Family Life and HIV/AIDS Education (FLHE)/Sexuality Education\": \"FamilyLifeAndHivAidsEducationFlheSexualityEducation\",\n    \"Gender and Human Rights (GHR)\": \"GenderAndHumanRightsGhr\",\n    \"Harm Reduction: Medication-Assisted Treatment (MAT)\": \"HarmReductionMedicationAssistedTreatmentMat\",\n    \"Harm Reduction: Needle and Syringe Exchange\": \"HarmReductionNeedleAndSyringeExchange\",\n    \"HIV Self-Testing (HIVST)\": \"HivSelfTestingHivst\",\n    \"HIV Testing Services (HTS)\": \"HivTestingServicesHts\",\n    \"Mental Health Services\": \"MentalHealthServices\",\n    \"Pre-Exposure Prophylaxis (PrEP)\": \"Pre-ExposureProphylaxisPrep\",\n    \"Social and Behaviour Change Communication (SBCC)\": \"SocialAndBehaviourChangeCommunicationSbcc\",\n    \"STI Screening and Treatment\": \"StiScreeningAndTreatment\",\n    \"Technical Assistance (TA)\": \"TechnicalAssistanceTa\"\n  \n  };\n  \n  export const populationToColumnMap = {\n    \"All Populations\": \"allPopulations\",\n    \"Adolescent Girls and Young Women (AGYW) in school\": \"agywInSchool\",\n    \"Adolescent Girls and Young Women (AGYW) out of school\": \"agywOutOfSchool\",\n    \"Adolescent Boys and Young Men (ABYM) in school\": \"abymInSchool\",\n    \"Adolescent Boys and Young Men (ABYM) out of school\": \"abymOutOfSchool\",\n    \"Children Living with HIV\": \"childrenLivingWithHIV\",\n    \"General Population\": \"generalPopulation\",\n    \"HIV-exposed Infants\": \"hivExposedInfants\",\n    \"Internally Displaced People (IDP)\": \"idp\",\n    \"Key Populations - Female Sex Workers (FSW)\": \"kpFsw\",\n    \"Key Populations - Men who have Sex with Men (MSM)\": \"kpMsm\",\n    \"Key Populations - People in enclosed settings\": \"kpPeopleInEnclosedSettings\",\n    \"Key Populations - People Who Inject Drugs (PWID)\": \"kpPwid\",\n    \"Key Populations - Transgender\": \"kpTransgender\",\n    \"Orphans and Vulnerable Children (OVC)\": \"ovc\",\n    \"Parents\": \"parents\",\n    \"People living with Disabilities\": \"peopleLivingWithDisabilities\",\n    \"People Living with HIV (PLHIV)\": \"plhiv\",\n    \"Serodiscordant Couples\": \"serodiscordantCouples\",\n    \"Teachers\": \"teachers\",\n    \"Faith Leaders\": \"faithLeaders\",\n    \"Fishermen\": \"fishermen\",\n    \"Pastoralists\": \"pastoralists\",\n    \"Transport Workers\": \"transportWorkers\"\n  };\n  \n  export const locationToColumnMap = {\n    \"All Locations\": \"allLocations\",\n    \"Community\": \"community\",\n    \"Facility\": \"facility\",\n    \"School\": \"school\"\n  };\n  \n\n\nexport const reverseMapping = (map) => {\n  const reversed = {};\n  for (const key in map) {\n    reversed[map[key]] = key;\n  }\n  return reversed;\n};\n\nexport const serviceReverseMap = reverseMapping(serviceToColumnMap);\nexport const populationReverseMap = reverseMapping(populationToColumnMap);\nexport const locationReverseMap = reverseMapping(locationToColumnMap);\n","import React, {useState} from 'react';\nimport * as d3 from 'd3';\nimport { serviceReverseMap, populationReverseMap, locationReverseMap } from './MappingUtils';\n\nconst themes = {\n    \"Services\": Object.keys(serviceReverseMap),\n    \"Target Populations\": Object.keys(populationReverseMap),\n    \"Locations\": Object.keys(locationReverseMap)\n};\n\nconst colorScale = d3.scaleThreshold()\n    .domain([0, 1, 6, 11, 21, 31])\n    .range([\"#D3D3D3\", \"#f7faf5\", \"#a0d492\", \"#78b971\", \"#60a455\", \"#3e8d00\", \"#008000\"]);\n\nconst groupDataByTheme = (data, themes) => {\n    const groupedData = {};\n\n    for (const theme in themes) {\n        groupedData[theme] = data.map(row => {\n            let filteredRow = {};\n            themes[theme].forEach(column => {\n                if (row[column] !== undefined) {\n                    filteredRow[column] = row[column];\n                }\n            });\n            return filteredRow;\n        }).filter(row => Object.keys(row).length > 0);\n    }\n\n    return groupedData;\n};\n\n\nconst ThemedTables = ({ data}) => {\n    const groupedData = groupDataByTheme(data, themes);\n\n    return (\n        <div >\n            {Object.keys(groupedData).map(theme => (\n                <div key={theme} >\n                    <h2 className=\"themedTables\">{theme}</h2>\n                    <DataTable data={groupedData[theme]} className=\"themedTables\" />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nconst DataTable = ({ data }) => {\n    const [openRow, setOpenRow] = useState(null); // State to track the open row\n\n    const toggleRow = (rowIndex) => {\n        setOpenRow(openRow === rowIndex ? null : rowIndex); // Toggle the open row\n    };\n\n    if (!Array.isArray(data) || data.length === 0) {\n        return <div>No data available.</div>;\n    }\n\n    const headers = Object.keys(data[0]);\n\n    return (\n        <table className=\"tableData\">\n            <tbody>\n                {headers.map((header, headerIndex) => {\n                    const readableHeader = serviceReverseMap[header] || populationReverseMap[header] || locationReverseMap[header] || header;\n\n                    return (\n                        <React.Fragment key={headerIndex}>\n                            <tr onClick={() => toggleRow(headerIndex)}>\n                                <td>{readableHeader}</td>\n                                <td>{data[0][header]}</td>\n                                <td style={{\n                                    backgroundColor: !isNaN(data[0][header]) ? colorScale(parseFloat(data[0][header])) : 'transparent',\n                                    width: '20px'\n                                }}></td>\n                            </tr>\n                            {openRow === headerIndex && (\n                                <tr>\n                                    <td colSpan=\"3\">\n                                        {/* Content of the dropdown */}\n                                        <div>\n                                            Additional information for {readableHeader}\n                                        </div>\n                                    </td>\n                                </tr>\n                            )}\n                        </React.Fragment>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n};\n\n\nexport { ThemedTables };\nexport default DataTable;\n","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst LgaMap = ({ lgaName, stateName }) => {\n    const svgRef = useRef(null);\n    const [lgaData, setLgaData] = React.useState(null);\n    const offsetY = 150; \n\n    const stateToCodeMapping = {\n        \"Abia\": \"AB\",\n        \"Adamawa\": \"AD\",\n        \"Akwa Ibom\": \"AK\",\n        \"Anambra\": \"AN\",\n        \"Bauchi\": \"BA\",\n        \"Bayelsa\": \"BY\",\n        \"Benue\": \"BE\",\n        \"Borno\": \"BR\",\n        \"Cross River\": \"CR\",\n        \"Delta\": \"DE\",\n        \"Ebonyi\": \"EB\",\n        \"Edo\": \"ED\",\n        \"Ekiti\": \"EK\",\n        \"Enugu\": \"EN\",\n        \"Federal Capital Territory\": \"FC\",\n        \"Gombe\": \"GO\",\n        \"Imo\": \"IM\",\n        \"Jigawa\": \"JI\",\n        \"Kaduna\": \"KD\",\n        \"Kano\": \"KN\",\n        \"Katsina\": \"KT\",\n        \"Kebbi\": \"KB\",\n        \"Kogi\": \"KO\",\n        \"Kwara\": \"KW\",\n        \"Lagos\": \"LA\",\n        \"Nasarawa\": \"NA\",\n        \"Niger\": \"NI\",\n        \"Ogun\": \"OG\",\n        \"Ondo\": \"ON\",\n        \"Osun\": \"OS\",\n        \"Oyo\": \"OY\",\n        \"Plateau\": \"PL\",\n        \"Rivers\": \"RI\",\n        \"Sokoto\": \"SO\",\n        \"Taraba\": \"TA\",\n        \"Yobe\": \"YO\",\n        \"Zamfara\": \"ZA\",\n    };\n\n    const stateCode = stateToCodeMapping[stateName];\n    console.log(\"lgaName:\", lgaName);\nconsole.log(\"stateName:\", stateName);\n\n\n    useEffect(() => {\n        if (!stateCode) {\n            console.error(`No state code found for state: ${stateName}`);\n            return;\n        }\n\n        d3.json(\"./lgas.geojson\").then(data => {\n            console.log(\"Loaded GeoJSON data:\", data);\n            const specificLGAData = data.features.filter(\n                feature => feature.properties.lga_name === lgaName\n            );\n\n            if (specificLGAData.length > 0) {\n                setLgaData({\n                    type: \"FeatureCollection\",\n                    features: specificLGAData\n                });\n            }\n        }).catch(error => {\n            console.error(\"Failed to load LGA GeoJSON data\", error);\n        });\n    }, [lgaName, stateName, stateCode]);\n\n    useEffect(() => {\n        if (lgaData && stateCode) {\n            const svg = d3.select(svgRef.current);\n            const centroid = d3.geoCentroid(lgaData);\n            const projection = d3.geoMercator().scale(18500).center(centroid).translate([800 / 2, (800 / 2) - offsetY]);\n            const path = d3.geoPath().projection(projection);\n\n            svg.selectAll(\"*\").remove();\n            svg.append(\"g\").selectAll(\"path\").data(lgaData.features).enter().append(\"path\")\n                .attr(\"d\", path).attr(\"fill\", \"#4E844E\")\n        }\n    }, [lgaData, stateCode]);\n\n    return (\n        <div className=\"lga-map\">\n            <svg ref={svgRef} width={800} height={800}></svg>\n        </div>\n    );\n};\n\nexport default LgaMap;","import React, { useState, useEffect } from 'react';\nimport { parseCSV, filterDataByLga} from '../components/TableData';\nimport { ThemedTables } from '../components/DataTable'; // or the correct path to your DataTable file\nimport \"../styles/index.css\";\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport { graphql } from 'gatsby';\nimport LgaMap from '../components/LgaMap';\n\n\n\nconst states = [\n  \"NATIONAL\",\"Abia\", \"Adamawa\", \"Akwa Ibom\", \"Anambra\", \"Bauchi\", \"Bayelsa\", \"Benue\", \n  \"Borno\", \"Cross River\", \"Delta\", \"Ebonyi\", \"Edo\", \"Ekiti\", \"Enugu\", \n  \"Federal Capital Territory\", \"Gombe\", \"Imo\", \"Jigawa\", \"Kaduna\", \"Kano\", \n  \"Katsina\", \"Kebbi\", \"Kogi\", \"Kwara\", \"Lagos\", \"Nasarawa\", \"Niger\", \"Ogun\", \n  \"Ondo\", \"Osun\", \"Oyo\", \"Plateau\", \"Rivers\", \"Sokoto\", \"Taraba\", \"Yobe\", \"Zamfara\"\n];\n\nconst services = [\n  \"All Services\",\n  \"Condom Distribtion\",\n  \"Family Life and HIV/AIDS Education (FLHE)/Sexuality Education\",\n  \"Gender and Human Rights (GHR)\",\n  \"Harm Reduction: Medication-Assisted Treatment (MAT)\",\n  \"Harm Reduction: Needle and Syringe Exchange\",\n  \"HIV Self-Testing (HIVST)\",\n  \"HIV Testing Services (HTS)\",\n  \"Mental Health Services\",\n  \"Pre-Exposure Prophylaxis (PrEP)\",\n  \"Social and Behaviour Change Communication (SBCC)\",\n  \"STI Screening and Treatment\",\n  \"Technical Assistance (TA)\"\n];\n\nconst populations = [\n  \"All Populations\",\n  \"AGYW in school\",\n  \"AGYW out of school\",\n  \"ABYM in school\",\n  \"ABYM out of school\",\n  \"Children living with HIV\",\n  \"General population\",\n  \"HIV-exposed infants\",\n  \"IDP\",\n  \"KP_FSW\",\n  \"KP_MSM\",\n  \"KP_people in enclosed settings\",\n  \"KP_PWID\",\n  \"KP_transgender\",\n  \"OVC\",\n  \"Parents\",\n  \"People living with disabilities\",\n  \"PLHIV\",\n  \"Serodiscordant couples\",\n  \"Teachers\",\n  \"Faith Leaders\",\n  \"Fishermen\",\n  \"Pastoralists\",\n  \"Transport Workers\"\n];\n\nconst locations = [\n  \"All Locations\",\n  \"Community\",\n  \"Facility\"\n];\n\nexport const query = graphql`\nquery($state: String!) {\n  allServiceProvidersCsv(filter: { state: { eq: $state } }) {\n    nodes {\n      state\n      lga_name\n    }\n  }\n}\n`;\n\nconst LgaTemplate = ({ data, pageContext }) => {\n  const { state, lga } = pageContext; // Use pageContext to get the state and LGA\n  const [selectedState, setSelectedState] = useState(state);\n  const [selectedLga, setSelectedLga] = useState(lga);\n  const [selectedService, setSelectedService] = useState(services[0]);\n  const [selectedPopulation, setSelectedPopulation] = useState(populations[0]);\n  const [selectedLocation, setSelectedLocation] = useState(locations[0]);\n  const [tableData, setTableData] = useState([]);\n  const [lgaList, setLgaList] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const csvData = await parseCSV('/service_providers.csv');\n      console.log(\"CSV Data:\", csvData); // Debug log\n      const filteredData = filterDataByLga(csvData, selectedLga);\n      console.log(\"Filtered Data:\", filteredData); // Debug log\n      setTableData(filteredData);\n    };\n  \n    fetchData();\n  }, [selectedLga]);\n  \n  \n  // Processing GraphQL data to create LGA list\n  useEffect(() => {\n    const newLgaList = data.allServiceProvidersCsv.nodes\n                          .map(node => node.lga_name)\n                          .filter((value, index, self) => self.indexOf(value) === index);\n    console.log(\"LGA List: \", newLgaList);\n    setLgaList(newLgaList);\n}, [data]);\n\n\n  \n\n  return (\n    <Layout>\n      <div className='holder'>\n        <Sidebar\n          selectedState={selectedState}\n          setSelectedState={setSelectedState}\n          selectedLga={selectedLga}\n          setSelectedLga={setSelectedLga}\n          selectedService={selectedService}\n          setSelectedService={setSelectedService}\n          selectedPopulation={selectedPopulation}\n          setSelectedPopulation={setSelectedPopulation}\n          selectedLocation={selectedLocation}\n          setSelectedLocation={setSelectedLocation}\n          lgaList={lgaList} // Passing the LGA list to Sidebar\n        />\n        \n        <div className=\"map-header-container\">\n          <div id='current-heading-container'></div>\n          <div className=\"current-heading\">{selectedState}</div>\n          <h4 className=\"map-title\">LGA: {selectedLga}</h4>\n          <ThemedTables data={tableData} className=\"themedTables\" />\n          <LgaMap />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default LgaTemplate;"],"names":["reverseMapping","map","reversed","key","serviceReverseMap","populationReverseMap","locationReverseMap","themes","Object","keys","colorScale","d3","domain","range","ThemedTables","_ref","data","groupedData","groupDataByTheme","theme","row","filteredRow","forEach","column","undefined","filter","length","React","className","DataTable","_ref2","openRow","setOpenRow","useState","Array","isArray","headers","header","headerIndex","readableHeader","onClick","rowIndex","style","backgroundColor","isNaN","parseFloat","width","colSpan","lgaName","stateName","svgRef","useRef","lgaData","setLgaData","stateCode","console","log","useEffect","then","specificLGAData","features","feature","properties","lga_name","type","catch","error","svg","current","centroid","projection","scale","center","translate","path","selectAll","remove","append","enter","attr","ref","height","services","populations","locations","pageContext","state","lga","selectedState","setSelectedState","selectedLga","setSelectedLga","selectedService","setSelectedService","selectedPopulation","setSelectedPopulation","selectedLocation","setSelectedLocation","tableData","setTableData","lgaList","setLgaList","async","csvData","parseCSV","filteredData","filterDataByLga","item","fetchData","newLgaList","allServiceProvidersCsv","nodes","node","value","index","self","indexOf","Layout","Sidebar","id","LgaMap"],"sourceRoot":""}