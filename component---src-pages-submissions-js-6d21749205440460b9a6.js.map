{"version":3,"file":"component---src-pages-submissions-js-6d21749205440460b9a6.js","mappings":"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","sources":["webpack://mappinghps2023/./src/pages/submissions.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport \"../styles/index.css\";\nimport logo from '../images/NACA.png';\nimport * as d3 from 'd3';\nimport Layout from '../components/Layout';\nimport { withPrefix } from 'gatsby';\n\nconst states = [\n  \"All States\",\"Abia\", \"Adamawa\", \"Akwa Ibom\", \"Anambra\", \"Bauchi\", \"Bayelsa\", \"Benue\", \n  \"Borno\", \"Cross River\", \"Delta\", \"Ebonyi\", \"Edo\", \"Ekiti\", \"Enugu\", \n  \"Federal Capital Territory\", \"Gombe\", \"Imo\", \"Jigawa\", \"Kaduna\", \"Kano\", \n  \"Katsina\", \"Kebbi\", \"Kogi\", \"Kwara\", \"Lagos\", \"Nasarawa\", \"Niger\", \"Ogun\", \n  \"Ondo\", \"Osun\", \"Oyo\", \"Plateau\", \"Rivers\", \"Sokoto\", \"Taraba\", \"Yobe\", \"Zamfara\"\n];\n\nconst NationalMap = () => {\n  const svgRef = useRef(null);\n  const [currentHeading, setCurrentHeading] = useState(\"NIGERIA\");\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const projection = d3.geoMercator()\n      .scale(3500)\n      .center([8.6753, 9.0820])\n      .translate([800 / 2, 800 / 2]);\n    const path = d3.geoPath().projection(projection);\n    const colorScale = d3.scaleThreshold()\n      .domain([0, 1, 2, 3]) \n      .range([\"#76ff0d\", \"#B11B10\",\"#FF7F00\", \"#ffc802\", \"#008000\"]); \n\n\n    \n        Promise.all([\n            d3.json(withPrefix(\"/nigeria_geojson.geojson\")),\n            d3.csv(withPrefix(\"/statusState.csv\"))\n        ]).then(([geoData, serviceData]) => {\n          geoData.features.forEach(geoFeature => {\n            const serviceFeature = serviceData.find(s => s.state === geoFeature.properties.state);\n            if (serviceFeature) {\n                geoFeature.properties.currentValue = +serviceFeature.serviceProviders;\n            }\n        });\n        \n        \n        svg.selectAll(\"path\").remove(); \n        \n        svg.append(\"g\")\n            .selectAll(\"path\")\n            .data(geoData.features)\n            .enter().append(\"path\")\n            .attr(\"d\", path)\n            .attr(\"fill\", d => {\n              const value = d.properties.currentValue;\n              if (typeof value === \"undefined\") return \"#D3D3D3\";  // Add this line\n              return colorScale(value);\n          })                \n            .attr(\"stroke\", \"#FFFFFF\")\n            .on(\"mouseover\", function(event, d) {\n              d3.select(this).attr(\"stroke\", \"#181e24\");\n                setCurrentHeading(d.properties.state);\n            })\n            .on(\"mouseout\", function(event, d) {\n                const value = d.properties.currentValue;\n                d3.select(this).attr(\"stroke\", \"#ffffff\");\n                setCurrentHeading(\"NIGERIA\");   \n            });\n            \n        const legendWidth = 40;\n        const legendHeight = 20;\n        const translateX = 600;\n        const translateY = 600;\n        \n        const legend = svg.append(\"g\")\n            .attr(\"transform\", `translate(${translateX},${translateY})`);\n        \n        let legendData = colorScale.domain().map(lowerBound => {\n            return [lowerBound, colorScale.invertExtent(colorScale(lowerBound))[1]];\n        });\n        \n        legendData = legendData.filter((value, index, self) => \n            self.findIndex(v => v[0] === value[0]) === index\n        );\n        \n        if (!legendData.some(arr => arr[0] === 0)) {\n            legendData.unshift([0, 0]);\n        }\n        \n        const legendGroups = legend.selectAll(\"g\")\n            .data(legendData)\n            .enter().append(\"g\")\n            .attr(\"transform\", (d, i) => `translate(0, ${i * legendHeight})`);\n        \n        legendGroups.append(\"rect\")\n            .attr(\"width\", legendWidth)\n            .attr(\"height\", legendHeight)\n            .attr(\"fill\", d => {\n                if (d[0] === 0) return \"#B11B10\";  \n                if (d[0] === 1) return \"#FF7F00\";\n                if (d[0] === 2) return \"#ffc802\";\n                if (d[0] === 3) return \"#008000\";\n                return colorScale(d[0]);\n            });    \n        \n        legendGroups.append(\"text\")\n            .attr(\"x\", legendWidth + 5)\n            .attr(\"y\", legendHeight / 2)\n            .attr(\"dy\", \"0.35em\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"font-family\", \"'Lato', sans-serif\") \n            .text(d => {\n                if (d[0] === 0) return `No submissions`; \n                if (d[0] === 1) return `No validations`; \n                if (d[0] === 2) return `Some validations`; \n                if (d[0] === 3) return `Completed validations`; \n                return `${d[0]} - ${d[1] - 1}`;\n            });\n\n          })\n          .catch(error => {\n              console.log(\"Error loading file:\", error);\n          });\n      }, []);\n        \n  return (\n    <Layout>\n            <div className=\"national-map\">\n        <div className=\"submissions map-header-container\">\n        <span className=\"updateTitle\">MAPPING STATUS UPDATE: </span>\n            <span className=\"current-heading\"> {currentHeading}</span>\n        </div>\n        <div className=\"parent-container\">\n    <div className=\"map-component\">\n    <div className=\"map-wrapper\">\n    <svg ref={svgRef} width={800} height={800}></svg>\n</div>\n\n    </div>\n</div>\n  </div>  \n    </Layout>\n\n  );\n            }\nexport default NationalMap; "],"names":["NationalMap","svgRef","useRef","currentHeading","setCurrentHeading","useState","useEffect","svg","d3","current","projection","scale","center","translate","path","colorScale","domain","range","Promise","all","withPrefix","then","_ref","geoData","serviceData","features","forEach","geoFeature","serviceFeature","find","s","state","properties","currentValue","serviceProviders","selectAll","remove","append","data","enter","attr","d","value","on","event","this","legend","legendData","map","lowerBound","invertExtent","filter","index","self","findIndex","v","some","arr","unshift","legendGroups","i","legendWidth","legendHeight","text","catch","error","console","log","React","Layout","className","ref","width","height"],"sourceRoot":""}