{"version":3,"file":"component---src-templates-state-template-js-2ba057f64927442eba41.js","mappings":"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","sources":["webpack://mappinghps2023/./src/components/StateMap.js","webpack://mappinghps2023/./src/templates/stateTemplate.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { navigate } from 'gatsby';\nimport \"../styles/index.css\";\nimport { withPrefix } from 'gatsby';\n\nfunction getStateGeoJSONPath(stateName) {\n    if (!stateName) {\n        console.warn(\"getStateGeoJSONPath was called with an undefined or null stateName.\");\n        return '';\n    }\n    return withPrefix(`/${stateName.replace(/\\s+/g, '_').toLowerCase()}.geojson`);\n}\n\nconst StateMap = ({ stateName, setCurrentHeading, selectedService, selectedPopulation, selectedLocation }) => {\n    const svgRef = useRef(null);\n    const offsetY = 150;\n    const [tooltipVisible, setTooltipVisible] = useState(false);\n    const [tooltipType, setTooltipType] = useState('map');\n    const [tooltipContent, setTooltipContent] = useState(\"\");\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n    const serviceToColumnMap = {\n        \"All Services\": \"serviceProviders\",\n        \"Condom Distribution\": \"CondomDistribution\",\n        \"Family Life and HIV/AIDS Education (FLHE)/Sexuality Education\": \"FamilyLifeAndHivAidsEducationFlheSexualityEducation\",\n        \"Gender and Human Rights (GHR)\": \"GenderAndHumanRightsGhr\",\n        \"Harm Reduction: Medication-Assisted Treatment (MAT)\": \"HarmReductionMedicationAssistedTreatmentMat\",\n        \"Harm Reduction: Needle and Syringe Exchange\": \"HarmReductionNeedleAndSyringeExchange\",\n        \"HIV Self-Testing (HIVST)\": \"HivSelfTestingHivst\",\n        \"HIV Testing Services (HTS)\": \"HivTestingServicesHts\",\n        \"Mental Health Services\": \"MentalHealthServices\",\n        \"Pre-Exposure Prophylaxis (PrEP)\": \"PreExposureProphylaxisPrep\",\n        \"Social and Behaviour Change Communication (SBCC)\": \"SocialAndBehaviourChangeCommunicationSbcc\",\n        \"STI Screening and Treatment\": \"StiScreeningAndTreatment\",\n        \"Technical Assistance (TA)\": \"TechnicalAssistanceTa\"\n    };\n\n    const populationToColumnMap = {\n        \"All Populations\": \"allPopulations\",\n        \"Adolescent Girls and Young Women (AGYW) in school\": \"agywInSchool\",\n        \"Adolescent Girls and Young Women (AGYW) out of school\": \"agywOutOfSchool\",\n        \"Adolescent Boys and Young Men (ABYM) in school\": \"abymInSchool\",\n        \"Adolescent Boys and Young Men (ABYM) out of school\": \"abymOutOfSchool\",\n        \"Children living with HIV\": \"childrenLivingWithHIV\",\n        \"General population\": \"generalPopulation\",\n        \"HIV-exposed infants\": \"hivExposedInfants\",\n        \"Internally Displaced People (IDP)\": \"idp\",\n        \"Key Populations - Female Sex Workers (FSW)\": \"kpFsw\",\n        \"Key Populations - Men who have Sex with Men (MSM)\": \"kpMsm\",\n        \"Key Populations - People in enclosed settings\": \"kpPeopleInEnclosedSettings\",\n        \"Key Populations - People Who Inject Drugs (PWID)\": \"kpPwid\",\n        \"Key Populations - Transgender\": \"kpTransgender\",\n        \"Orphans and Vulnerable Children (OVC)\": \"ovc\",\n        \"Parents\": \"parents\",\n        \"People living with disabilities\": \"peopleLivingWithDisabilities\",\n        \"People Living with HIV (PLHIV)\": \"plhiv\",\n        \"Serodiscordant couples\": \"serodiscordantCouples\",\n        \"Teachers\": \"teachers\",\n        \"Faith Leaders\": \"faithLeaders\",\n        \"Fishermen\": \"fishermen\",\n        \"Pastoralists\": \"pastoralists\",\n        \"Transport Workers\": \"transportWorkers\"\n    };\n\n    const locationToColumnMap = {\n        \"All Locations\": \"allLocations\",\n        \"Community\": \"community\",\n        \"Facility\": \"facility\",\n        \"School\": \"school\"\n    }\n\n    const stateCodeToNameMap = {\n        \"AB\": \"Abia\",\n        \"AD\": \"Adamawa\",\n        \"AK\": \"Akwa Ibom\",\n        \"AN\": \"Anambra\",\n        \"BA\": \"Bauchi\",\n        \"BY\": \"Bayelsa\",\n        \"BE\": \"Benue\",\n        \"BR\": \"Borno\",\n        \"CR\": \"Cross River\",\n        \"DE\": \"Delta\",\n        \"EB\": \"Ebonyi\",\n        \"ED\": \"Edo\",\n        \"EK\": \"Ekiti\",\n        \"EN\": \"Enugu\",\n        \"FC\": \"Federal Capital Territory\",\n        \"GO\": \"Gombe\",\n        \"IM\": \"Imo\",\n        \"JI\": \"Jigawa\",\n        \"KD\": \"Kaduna\",\n        \"KN\": \"Kano\",\n        \"KT\": \"Katsina\",\n        \"KB\": \"Kebbi\",\n        \"KO\": \"Kogi\",\n        \"KW\": \"Kwara\",\n        \"LA\": \"Lagos\",\n        \"NA\": \"Nasarawa\",\n        \"NI\": \"Niger\",\n        \"OG\": \"Ogun\",\n        \"ON\": \"Ondo\",\n        \"OS\": \"Osun\",\n        \"OY\": \"Oyo\",\n        \"PL\": \"Plateau\",\n        \"RI\": \"Rivers\",\n        \"SO\": \"Sokoto\",\n        \"TA\": \"Taraba\",\n        \"YO\": \"Yobe\",\n        \"ZA\": \"Zamfara\"\n    };\n\n    const stateGeoJSONPath = getStateGeoJSONPath(stateName);\n\n    useEffect(() => {\n        const svg = d3.select(svgRef.current);\n        const width = 930;\n        const height = 930;\n        const projection = d3.geoMercator().translate([width / 3, (height / 2) - offsetY]);\n        const path = d3.geoPath().projection(projection);\n        const colorScale = d3.scaleThreshold()\n            .domain([0, 1, 6, 11, 21, 31])\n            .range([\"#D3D3D3\", \"#f7faf5\", \"#a0d492\", \"#78b971\", \"#60a455\", \"#3e8d00\", \"#008000\"]);\n\n        const updateVisualization = async () => {\n            try {\n                const lgaGeoData = await d3.json(stateGeoJSONPath);\n                // Adjust projection based on geoData\n                const bounds = path.bounds(lgaGeoData);\n                const centroid = d3.geoCentroid(lgaGeoData);\n                const dx = bounds[1][0] - bounds[0][0];\n                const dy = bounds[1][1] - bounds[0][1];\n                const scale = 0.065 / Math.max(dx / width, dy / height) * width;\n                projection.scale(scale).center(centroid);\n\n\n                Promise.all([\n                    d3.csv(withPrefix(\"/service_providers.csv\"))\n                ]).then(([serviceData]) => {\n                    // Define stateDataLookup here\n                    const lgaDataLookup = serviceData.reduce((acc, row) => {\n                        acc[row.lga_name] = row;\n                        return acc;\n                    }, {});\n\n                    // Determine the aggregation column based on the selected filters\n                    let aggregationColumn = 'serviceProviders'; // Default column\n\n                    if (selectedService !== 'All Services') {\n                        aggregationColumn = serviceToColumnMap[selectedService];\n                    } else if (selectedPopulation !== 'All Populations') {\n                        aggregationColumn = populationToColumnMap[selectedPopulation];\n                    } else if (selectedLocation !== 'All Locations') {\n                        aggregationColumn = locationToColumnMap[selectedLocation];\n                    }\n\n                    // Create a map for count by LGA based on the selected filter\n                    const countByLGA = serviceData.reduce((acc, row) => {\n                        const lgaName = row.lga_name;\n                        const count = +row[aggregationColumn] || 0;\n                        acc[lgaName] = (acc[lgaName] || 0) + count;\n                        return acc;\n                    }, {});\n\n                    svg.selectAll(\"path\").remove();\n                    svg.append(\"g\")\n                        .selectAll(\"path\")\n                        .data(lgaGeoData.features)\n                        .enter().append(\"path\")\n                        .attr(\"d\", path)\n                        .attr(\"fill\", d => {\n                            const count = countByLGA[d.properties.lga_name]; // Replace 'NAME' with the property name for LGA in your GeoJSON\n                            return count != null ? colorScale(count) : \"#f7faf5\"; // Use color scale if count exists, otherwise use default color\n                        })\n                        .attr(\"stroke\", \"#54595f\") // Black borders for states\n                        .attr(\"stroke-width\", 3)\n                        .on(\"mouseover\", function (event, d) {\n                            const lgaNamed = d.properties.lga_name; // Assuming the state name is in the 'name' property\n                            // Use the state name to get the current value from the stateDataLookup\n                            const lgaInfo = lgaDataLookup[lgaNamed];\n                            // Use aggregationColumn to dynamically display the data\n                            const currentValue = lgaInfo && lgaInfo[aggregationColumn] ? lgaInfo[aggregationColumn] : 'No data';\n                            setCurrentHeading(lgaNamed); // Update state name display\n                            setTooltipContent(`${lgaNamed}: ${currentValue}`);\n                            setTooltipType('map');\n                            setTooltipVisible(true);\n                            setTooltipPosition({ x: event.pageX, y: event.pageY });\n                            d3.select(this).attr(\"fill\", \"#eb4747\");\n                        })\n                        .on(\"mouseout\", function (event, d) {\n                            setCurrentHeading(stateName);\n                            setTooltipVisible(false);\n                            // Retrieve the count again for the current LGA\n                            const count = countByLGA[d.properties.lga_name];\n                            // Set the fill color based on the count, just like when the paths were initially created\n                            d3.select(this).attr(\"fill\", count != null ? colorScale(count) : \"#f7faf5\");\n                        })\n                        \n                        .on(\"click\", function (event, d) {\n                            const lgaURL = `./${d.properties.lga_name.toLowerCase().replace(/\\s+/g, '-')}/`;\n                            window.location.href = lgaURL;\n                        });\n                        \n                        \n\n\n                    const legendWidth = 30;\n                    const legendHeight = 20;\n\n                    // Calculate translation for legend to be positioned bottom-right\n                    const translateX = 650;  // 800 - 100 (legend total width with some padding)\n                    const translateY = 400;  // 800 - 200 (considering 5 blocks of color and some padding)\n\n                    // Create a group for the legend\n                    const legend = svg.append(\"g\")\n                        .attr(\"transform\", `translate(${translateX},${translateY})`);\n\n                    let legendData = colorScale.domain().map(lowerBound => {\n                        return [lowerBound, colorScale.invertExtent(colorScale(lowerBound))[1]];\n                    });\n\n                    // Filter out duplicates, based on the first element of each tuple\n                    legendData = legendData.filter((value, index, self) =>\n                        self.findIndex(v => v[0] === value[0]) === index);\n\n                    // Add the \"No data\" category at the start\n                    if (!legendData.some(arr => arr[0] === 0)) {\n                        legendData.unshift([0, 0]);\n                    }\n\n\n                    const legendGroups = legend.selectAll(\"g\")\n                        .data(legendData)\n                        .enter().append(\"g\")\n                        .attr(\"transform\", (d, i) => `translate(0, ${i * legendHeight})`);\n\n                    legendGroups.append(\"rect\")\n                        .attr(\"width\", legendWidth)\n                        .attr(\"height\", legendHeight)\n                        .attr(\"fill\", d => {\n                            // Log to debug color assignment for legend\n                            console.log('Legend color for range', d, 'is', colorScale(d[0]));\n                            return colorScale(d[0]);\n                        });\n\n                    legendGroups.append(\"text\")\n                        .attr(\"x\", legendWidth + 5)\n                        .attr(\"y\", legendHeight / 2)\n                        .attr(\"dy\", \"0.35em\")\n                        .attr(\"font-size\", \"12px\")\n                        .attr(\"font-family\", \"'Lato', sans-serif\")\n                        .text(d => {\n                            // Log to debug text assignment for legend\n                            console.log('Legend text for range', d, 'is', d[0] === 0 ? `0` : `${d[0]} - ${d[1] - 1}`);\n                            if (d[0] === 0) return `0`;\n                            if (d[1] === undefined) return 'Above 30'; // Adjust this if your data has a different upper bound\n                            return `${d[0]} - ${d[1] - 1}`;\n                        });\n\n                })\n\n\n            } catch (error) {\n                console.error(\"Error loading file:\", error);\n            }\n        };\n\n        updateVisualization();\n    }, [selectedService, selectedPopulation, selectedLocation]);\n\n    return (\n        <div>\n            <div className=\"map-container state\">\n                <svg ref={svgRef} width=\"800\" height=\"800\" />\n\n                {tooltipVisible && (\n                    <div\n                    className=\"map-tooltip\"\n                    style={{\n                        position: 'absolute',\n                        top: tooltipPosition.y,\n                        left: tooltipPosition.x\n                    }}\n                >\n                        {tooltipContent}\n                    </div>\n                )}\n            </div>\n        </div>\n\n    )\n};\n\n\nexport default StateMap;\n","import React, { useState, useEffect } from 'react';\nimport \"../styles/index.css\";\nimport * as d3 from 'd3';\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport { graphql } from 'gatsby';\nimport { withPrefix } from 'gatsby';\nimport StateMap from '../components/StateMap';\nimport logo from '../images/NACA.png';\nimport { navigate } from 'gatsby';\n\n\nconst states = [\n  \"All States\", \"Abia\", \"Adamawa\", \"Akwa Ibom\", \"Anambra\", \"Bauchi\", \"Bayelsa\", \"Benue\",\n  \"Borno\", \"Cross River\", \"Delta\", \"Ebonyi\", \"Edo\", \"Ekiti\", \"Enugu\",\n  \"Federal Capital Territory\", \"Gombe\", \"Imo\", \"Jigawa\", \"Kaduna\", \"Kano\",\n  \"Katsina\", \"Kebbi\", \"Kogi\", \"Kwara\", \"Lagos\", \"Nasarawa\", \"Niger\", \"Ogun\",\n  \"Ondo\", \"Osun\", \"Oyo\", \"Plateau\", \"Rivers\", \"Sokoto\", \"Taraba\", \"Yobe\", \"Zamfara\"\n];\n\nconst services = [\n  \"All Services\",\n  \"Condom Distribtion\",\n  \"Family Life and HIV/AIDS Education (FLHE)/Sexuality Education\",\n  \"Gender and Human Rights (GHR)\",\n  \"Harm Reduction: Medication-Assisted Treatment (MAT)\",\n  \"Harm Reduction: Needle and Syringe Exchange\",\n  \"HIV Self-Testing (HIVST)\",\n  \"HIV Testing Services (HTS)\",\n  \"Mental Health Services\",\n  \"Pre-Exposure Prophylaxis (PrEP)\",\n  \"Social and Behaviour Change Communication (SBCC)\",\n  \"STI Screening and Treatment\",\n  \"Technical Assistance (TA)\"\n];\n\nconst populations = [\n  \"All Populations\",\n  \"Adolescent Girls and Young Women (AGYW) in school\",\n  \"Adolescent Girls and Young Women (AGYW) out of school\",\n  \"Adolescent Boys and Young Men (ABYM) in school\",\n  \"Adolescent Boys and Young Men (ABYM) out of school\",\n  \"Children living with HIV\",\n  \"General population\",\n  \"HIV-exposed infants\",\n  \"Internally Displaced People (IDP)\",\n  \"Key Populations - Female Sex Workers (FSW)\",\n  \"Key Populations - Men who have Sex with Men (MSM)\",\n  \"Key Populations - People in enclosed settings\",\n  \"Key Populations - People Who Inject Drugs (PWID)\",\n  \"Key Populations - Transgender\",\n  \"Orphans and Vulnerable Children (OVC)\",\n  \"Parents\",\n  \"People living with disabilities\",\n  \"People Living with HIV (PLHIV)\",\n  \"Serodiscordant couples\",\n  \"Teachers\",\n  \"Faith Leaders\",\n  \"Fishermen\",\n  \"Pastoralists\",\n  \"Transport Workers\"\n];\n\nconst locations = [\n  \"All Locations\",\n  \"Community\",\n  \"Facility\"\n];\n\n\nexport const query = graphql`\nquery($state: String!) {\n  allServiceProvidersCsv(filter: { state: { eq: $state } }) {\n    nodes {\n      state\n      lga_name\n    }\n  }\n}\n`;\n\nconst StateTemplate = ({ data }) => {\n  const stateName = data.allServiceProvidersCsv.nodes[0]?.state;\n  const [currentHeading, setCurrentHeading] = useState(stateName || \"N/A\");\n  console.log(\"State Name in StateTemplate:\", stateName);\n  const [selectedService, setSelectedService] = React.useState(services[0]);\n  const [selectedPopulation, setSelectedPopulation] = React.useState(populations[0]);\n  const [selectedLocation, setSelectedLocation] = React.useState(locations[0]);\n  const [selectedLga, setSelectedLga] = React.useState(\"All LGAs\");\n  const [selectedState, setSelectedState] = useState(stateName);\n  const [lgaList, setLgaList] = useState([]);\n\n  useEffect(() => {\n    if (data && selectedState) {\n        const newLgaList = data.allServiceProvidersCsv.nodes\n                              .filter(node => node.state === selectedState)\n                              .map(node => node.lga_name)\n                              .filter((value, index, self) => self.indexOf(value) === index);\n        setLgaList(newLgaList);\n    }\n}, [data, selectedState]);\n  // Assuming selectedState and setSelectedState are defined elsewhere in your component\n  // If not, you need to define them here as well using useState.\n\n  const handleServiceChange = (service) => {\n    setSelectedService(service);\n  };\n\n  const handlePopulationChange = (population) => {\n    setSelectedPopulation(population);\n  };\n\n  const handleLocationChange = (location) => {\n    setSelectedLocation(location);\n  };\n\n  const getTitle = () => {\n    if (selectedService !== services[0]) {\n      return `Number of Providers for ${selectedService}`;\n    }\n    if (selectedPopulation !== populations[0]) {\n      return `Number of Providers for ${selectedPopulation}`;\n    }\n    if (selectedLocation !== locations[0]) {\n      return `Number of Providers in ${selectedLocation}`;\n    }\n    return 'Number of HIV Prevention Service Providers';\n  }\n\n\n  return (\n    <Layout pageTitle={`MHPS 2023 | ${selectedState}`} >\n      <div className='holder'>\n        <Sidebar\n          selectedState={selectedState} // Ensure selectedState is defined\n          setSelectedState={setSelectedState} // Ensure setSelectedState is defined\n          selectedLga={selectedLga} // Ensure selectedState is defined\n          setSelectedLga={setSelectedLga} \n          selectedService={selectedService}\n          setSelectedService={setSelectedService}\n          selectedPopulation={selectedPopulation}\n          setSelectedPopulation={setSelectedPopulation}\n          selectedLocation={selectedLocation}\n          setSelectedLocation={setSelectedLocation}\n          onServiceChange={handleServiceChange}\n          onPopulationChange={handlePopulationChange}\n          onLocationChange={handleLocationChange}\n          lgaList={lgaList}\n          showLgaDropdown={true}\n        />\n\n        <div className=\"map-header-container\">\n          <div id='current-heading-container'>\n          </div>\n          <div className=\"current-heading\">{currentHeading}</div>\n          <h4 className=\"map-title\"> {getTitle()} </h4>\n\n          <StateMap\n            stateName={stateName}\n            setCurrentHeading={setCurrentHeading}\n            selectedService={selectedService}\n            selectedPopulation={selectedPopulation}\n            selectedLocation={selectedLocation}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default StateTemplate;"],"names":["_ref","stateName","setCurrentHeading","selectedService","selectedPopulation","selectedLocation","svgRef","useRef","tooltipVisible","setTooltipVisible","useState","tooltipType","setTooltipType","tooltipContent","setTooltipContent","tooltipPosition","setTooltipPosition","x","y","serviceToColumnMap","populationToColumnMap","locationToColumnMap","stateGeoJSONPath","withPrefix","replace","toLowerCase","console","warn","getStateGeoJSONPath","useEffect","svg","d3","current","projection","translate","width","height","path","colorScale","domain","range","async","lgaGeoData","bounds","centroid","dx","dy","scale","Math","max","center","Promise","all","then","_ref2","serviceData","lgaDataLookup","reduce","acc","row","lga_name","aggregationColumn","countByLGA","lgaName","count","selectAll","remove","append","data","features","enter","attr","d","properties","on","event","lgaNamed","lgaInfo","currentValue","pageX","pageY","this","lgaURL","window","location","href","legend","legendData","map","lowerBound","invertExtent","filter","value","index","self","findIndex","v","some","arr","unshift","legendGroups","i","log","legendWidth","legendHeight","text","undefined","error","updateVisualization","React","className","ref","style","position","top","left","services","populations","locations","_data$allServiceProvi","allServiceProvidersCsv","nodes","state","currentHeading","setSelectedService","setSelectedPopulation","setSelectedLocation","selectedLga","setSelectedLga","selectedState","setSelectedState","lgaList","setLgaList","newLgaList","node","indexOf","Layout","pageTitle","Sidebar","onServiceChange","service","onPopulationChange","population","onLocationChange","showLgaDropdown","id","StateMap"],"sourceRoot":""}