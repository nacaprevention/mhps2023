{"version":3,"file":"component---src-pages-index-js-969093a93e8c06de0a6c.js","mappings":"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","sources":["webpack://mappinghps2023/./src/pages/index.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/index.css\";\nimport \"../styles/bubbles.css\";\nimport Sidebar from '../components/Sidebar';\nimport Layout from '../components/Layout';\nimport { navigate } from 'gatsby';\n\nconst states = [\n  \"All States\", \"Abia\", \"Adamawa\", \"Akwa Ibom\", \"Anambra\", \"Bauchi\", \"Bayelsa\", \"Benue\",\n  \"Borno\", \"Cross River\", \"Delta\", \"Ebonyi\", \"Edo\", \"Ekiti\", \"Enugu\",\n  \"Federal Capital Territory\", \"Gombe\", \"Imo\", \"Jigawa\", \"Kaduna\", \"Kano\",\n  \"Katsina\", \"Kebbi\", \"Kogi\", \"Kwara\", \"Lagos\", \"Nasarawa\", \"Niger\", \"Ogun\",\n  \"Ondo\", \"Osun\", \"Oyo\", \"Plateau\", \"Rivers\", \"Sokoto\", \"Taraba\", \"Yobe\", \"Zamfara\"\n];\n\nconst services = [\n  \"All Services\", \"Condom Distribution\", \"Family Life and HIV/AIDS Education (FLHE)/Sexuality Education\",\n  \"Gender and Human Rights (GHR)\", \"Harm Reduction: Medication-Assisted Treatment (MAT)\",\n  \"Harm Reduction: Needle and Syringe Exchange\", \"HIV Self-Testing (HIVST)\", \"HIV Testing Services (HTS)\",\n  \"Mental Health Services\", \"Pre-Exposure Prophylaxis (PrEP)\", \"Social and Behaviour Change Communication (SBCC)\",\n  \"STI Screening and Treatment\", \"Technical Assistance (TA)\"\n];\n\nconst populations = [\n  \"All Populations\",\n  \"Adolescent Girls and Young Women (AGYW) in school\",\n  \"Adolescent Girls and Young Women (AGYW) out of school\",\n  \"Adolescent Boys and Young Men (ABYM) in school\",\n  \"Adolescent Boys and Young Men (ABYM) out of school\",\n  \"Children living with HIV\",\n  \"General population\",\n  \"HIV-exposed infants\",\n  \"Internally Displaced People (IDP)\",\n  \"Key Populations - Female Sex Workers (FSW)\",\n  \"Key Populations - Men who have Sex with Men (MSM)\",\n  \"Key Populations - People in enclosed settings\",\n  \"Key Populations - People Who Inject Drugs (PWID)\",\n  \"Key Populations - Transgender\",\n  \"Orphans and Vulnerable Children (OVC)\",\n  \"Parents\",\n  \"People living with disabilities\",\n  \"People Living with HIV (PLHIV)\",\n  \"Serodiscordant couples\",\n  \"Teachers\",\n  \"Faith Leaders\",\n  \"Fishermen\",\n  \"Pastoralists\",\n  \"Transport Workers\"\n];\n\nconst locations = [\n  \"All Locations\",\n  \"Community\",\n  \"Facility\",\n  \"School\"\n];\n\n\nconst NationalMap = ({ selectedService, selectedPopulation, selectedLocation, setCurrentHeading }) => {\n  const svgRef = useRef(null);\n\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [tooltipType, setTooltipType] = useState('map');\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  const serviceToColumnMap = {\n    \"All Services\": \"serviceProviders\",\n    \"Condom Distribution\": \"CondomDistribution\",\n    \"Family Life and HIV/AIDS Education (FLHE)/Sexuality Education\": \"FamilyLifeAndHivAidsEducationFlheSexualityEducation\",\n    \"Gender and Human Rights (GHR)\": \"GenderAndHumanRightsGhr\",\n    \"Harm Reduction: Medication-Assisted Treatment (MAT)\": \"HarmReductionMedicationAssistedTreatmentMat\",\n    \"Harm Reduction: Needle and Syringe Exchange\": \"HarmReductionNeedleAndSyringeExchange\",\n    \"HIV Self-Testing (HIVST)\": \"HivSelfTestingHivst\",\n    \"HIV Testing Services (HTS)\": \"HivTestingServicesHts\",\n    \"Mental Health Services\": \"MentalHealthServices\",\n    \"Pre-Exposure Prophylaxis (PrEP)\": \"PreExposureProphylaxisPrep\",\n    \"Social and Behaviour Change Communication (SBCC)\": \"SocialAndBehaviourChangeCommunicationSbcc\",\n    \"STI Screening and Treatment\": \"StiScreeningAndTreatment\",\n    \"Technical Assistance (TA)\": \"TechnicalAssistanceTa\"\n  };\n\n  const populationToColumnMap = {\n    \"All Populations\": \"allPopulations\",\n    \"Adolescent Girls and Young Women (AGYW) in school\": \"agywInSchool\",\n    \"Adolescent Girls and Young Women (AGYW) out of school\": \"agywOutOfSchool\",\n    \"Adolescent Boys and Young Men (ABYM) in school\": \"abymInSchool\",\n    \"Adolescent Boys and Young Men (ABYM) out of school\": \"abymOutOfSchool\",\n    \"Children living with HIV\": \"childrenLivingWithHIV\",\n    \"General population\": \"generalPopulation\",\n    \"HIV-exposed infants\": \"hivExposedInfants\",\n    \"Internally Displaced People (IDP)\": \"idp\",\n    \"Key Populations - Female Sex Workers (FSW)\": \"kpFsw\",\n    \"Key Populations - Men who have Sex with Men (MSM)\": \"kpMsm\",\n    \"Key Populations - People in enclosed settings\": \"kpPeopleInEnclosedSettings\",\n    \"Key Populations - People Who Inject Drugs (PWID)\": \"kpPwid\",\n    \"Key Populations - Transgender\": \"kpTransgender\",\n    \"Orphans and Vulnerable Children (OVC)\": \"ovc\",\n    \"Parents\": \"parents\",\n    \"People living with disabilities\": \"peopleLivingWithDisabilities\",\n    \"People Living with HIV (PLHIV)\": \"plhiv\",\n    \"Serodiscordant couples\": \"serodiscordantCouples\",\n    \"Teachers\": \"teachers\",\n    \"Faith Leaders\": \"faithLeaders\",\n    \"Fishermen\": \"fishermen\",\n    \"Pastoralists\": \"pastoralists\",\n    \"Transport Workers\": \"transportWorkers\"\n  };\n\n  const locationToColumnMap = {\n    \"All Locations\": \"allLocations\",\n    \"Community\": \"community\",\n    \"Facility\": \"facility\",\n    \"School\": \"school\"\n  }\n\n  const stateCodeToNameMap = {\n    \"AB\": \"Abia\",\n    \"AD\": \"Adamawa\",\n    \"AK\": \"Akwa Ibom\",\n    \"AN\": \"Anambra\",\n    \"BA\": \"Bauchi\",\n    \"BY\": \"Bayelsa\",\n    \"BE\": \"Benue\",\n    \"BR\": \"Borno\",\n    \"CR\": \"Cross River\",\n    \"DE\": \"Delta\",\n    \"EB\": \"Ebonyi\",\n    \"ED\": \"Edo\",\n    \"EK\": \"Ekiti\",\n    \"EN\": \"Enugu\",\n    \"FC\": \"Federal Capital Territory\",\n    \"GO\": \"Gombe\",\n    \"IM\": \"Imo\",\n    \"JI\": \"Jigawa\",\n    \"KD\": \"Kaduna\",\n    \"KN\": \"Kano\",\n    \"KT\": \"Katsina\",\n    \"KB\": \"Kebbi\",\n    \"KO\": \"Kogi\",\n    \"KW\": \"Kwara\",\n    \"LA\": \"Lagos\",\n    \"NA\": \"Nasarawa\",\n    \"NI\": \"Niger\",\n    \"OG\": \"Ogun\",\n    \"ON\": \"Ondo\",\n    \"OS\": \"Osun\",\n    \"OY\": \"Oyo\",\n    \"PL\": \"Plateau\",\n    \"RI\": \"Rivers\",\n    \"SO\": \"Sokoto\",\n    \"TA\": \"Taraba\",\n    \"YO\": \"Yobe\",\n    \"ZA\": \"Zamfara\"\n  };\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n\n    const projection = d3.geoMercator()\n      .scale(3500)\n      .center([8.6753, 9.0820])\n      .translate([800 / 2, 800 / 2]);\n\n    const path = d3.geoPath().projection(projection);\n\n    // Adjusted color scale to handle value 0\n    const colorScale = d3.scaleThreshold()\n      .domain([0, 1, 11, 21])\n      .range([\"#D3D3D3\", \"#f7faf5\", \"#a0d492\", \"#60a455\", \"#008000\"]);\n\n\n    const updateVisualization = () => {\n\n      Promise.all([\n        d3.json(\"./lgas.geojson\"),\n        d3.json(\"./nigeria_geojson.geojson\"),\n        d3.csv(\"./service_providers.csv\"),\n        d3.csv(\"./stateData.csv\")\n      ]).then(([lgaGeoData, stateGeoData, serviceData, stateData]) => {\n        // Define stateDataLookup here\n        const stateDataLookup = stateData.reduce((acc, row) => {\n          acc[row.state] = row;\n          return acc;\n        }, {});\n\n        // Determine the aggregation column based on the selected filters\n        let aggregationColumn = 'serviceProviders'; // Default column\n\n        if (selectedService !== 'All Services') {\n          aggregationColumn = serviceToColumnMap[selectedService];\n        } else if (selectedPopulation !== 'All Populations') {\n          aggregationColumn = populationToColumnMap[selectedPopulation];\n        } else if (selectedLocation !== 'All Locations') {\n          aggregationColumn = locationToColumnMap[selectedLocation];\n        }\n\n        // Create a map for count by LGA based on the selected filter\n        const countByLGA = serviceData.reduce((acc, row) => {\n          const lgaName = row.lga_name;\n          const count = +row[aggregationColumn] || 0;\n          acc[lgaName] = (acc[lgaName] || 0) + count;\n          return acc;\n        }, {});\n\n        // Remove any existing .lga elements\n        svg.selectAll(\".lga\").remove();\n\n        // Bind LGA data and create paths with color based on service provider count\n        svg.append(\"g\")\n          .selectAll(\"path\")\n          .data(lgaGeoData.features)\n          .enter().append(\"path\")\n          .attr(\"class\", \"lga\")\n          .attr(\"d\", path)\n          .attr(\"fill\", d => {\n            const count = countByLGA[d.properties.lga_name]; // Replace 'NAME' with the property name for LGA in your GeoJSON\n            return count != null ? colorScale(count) : \"#f7faf5\"; // Use color scale if count exists, otherwise use default color\n          })\n          .attr(\"stroke\", \"#808080\") // Black borders for LGAs\n          .attr(\"stroke-width\", 1); // Adjust stroke width as needed\n\n        svg.selectAll(\".state\").remove();\n        svg.append(\"g\")\n          .selectAll(\"path\")\n          .data(stateGeoData.features)\n          .enter().append(\"path\")\n          .attr(\"class\", \"state\")\n          .attr(\"d\", path)\n          .attr(\"fill\", \"rgba(0,0,0,0)\") // No fill for states, only borders\n          .attr(\"stroke\", \"#54595f\") // Black borders for states\n          .attr(\"stroke-width\", 4)\n          .on(\"mouseover\", function (event, d) {\n            const stateName = d.properties.state; // Assuming the state name is in the 'name' property\n            // Use the state name to get the current value from the stateDataLookup\n            const stateInfo = stateDataLookup[stateName];\n            // Use aggregationColumn to dynamically display the data\n            const currentValue = stateInfo && stateInfo[aggregationColumn] ? stateInfo[aggregationColumn] : 'No data';\n            setCurrentHeading(stateName); // Update state name display\n            setTooltipContent(`${stateName}: ${currentValue}`);\n            setTooltipType('map');\n            setTooltipVisible(true);\n            setTooltipPosition({ x: event.pageX, y: event.pageY });\n            d3.select(this).attr(\"fill\", \"#B11B10\");\n          })\n          .on(\"mouseout\", function (event, d) {\n            setCurrentHeading(\"NIGERIA\");\n            setTooltipVisible(false);\n            d3.select(this).attr(\"fill\", \"rgba(0,0,0,0)\");\n          })\n          .on(\"click\", function (event, d) {\n            const stateName = d.properties.state;\n            const urlFriendlyStateName = stateName.toLowerCase().replace(/\\s+/g, '-');\n            navigate(`/${urlFriendlyStateName}`); // Navigate to the state-specific page\n          });\n\n\n\n\n        const legendWidth = 30;\n        const legendHeight = 20;\n\n        // Calculate translation for legend to be positioned bottom-right\n        const translateX = 650;  // 800 - 100 (legend total width with some padding)\n        const translateY = 550;  // 800 - 200 (considering 5 blocks of color and some padding)\n\n        // Create a group for the legend\n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(${translateX},${translateY})`);\n\n        let legendData = colorScale.domain().map(lowerBound => {\n          return [lowerBound, colorScale.invertExtent(colorScale(lowerBound))[1]];\n        });\n\n        // Filter out duplicates, based on the first element of each tuple\n        legendData = legendData.filter((value, index, self) =>\n          self.findIndex(v => v[0] === value[0]) === index);\n\n        // Add the \"No data\" category at the start\n        if (!legendData.some(arr => arr[0] === 0)) {\n          legendData.unshift([0, 0]);\n        }\n\n\n        const legendGroups = legend.selectAll(\"g\")\n          .data(legendData)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0, ${i * legendHeight})`);\n\n        legendGroups.append(\"rect\")\n          .attr(\"width\", legendWidth)\n          .attr(\"height\", legendHeight)\n          .attr(\"fill\", d => {\n            // Log to debug color assignment for legend\n            console.log('Legend color for range', d, 'is', colorScale(d[0]));\n            return colorScale(d[0]);\n          });\n\n        legendGroups.append(\"text\")\n          .attr(\"x\", legendWidth + 5)\n          .attr(\"y\", legendHeight / 2)\n          .attr(\"dy\", \"0.35em\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"font-family\", \"'Lato', sans-serif\")\n          .text(d => {\n            // Log to debug text assignment for legend\n            console.log('Legend text for range', d, 'is', d[0] === 0 ? `0` : `${d[0]} - ${d[1] - 1}`);\n            if (d[0] === 0) return `0`;\n            if (d[1] === undefined) return 'Above 20'; // Adjust this if your data has a different upper bound\n            return `${d[0]} - ${d[1] - 1}`;\n          });\n\n        const App = () => {\n          return (\n            <div>s\n              <h1>React Expandable Bubble</h1>\n            </div>\n          );\n        };\n\n      })\n\n\n        .catch(error => {\n          console.log(\"Error loading file:\", error);\n        });\n    }\n\n\n    updateVisualization(); // or use multiple parameters if needed\n\n  }, [selectedService, selectedPopulation, selectedLocation]);\n  ;\n\n  return (\n    <div>\n      <div className=\"map-container\">\n        <svg ref={svgRef} width=\"800\" height=\"800\" />\n\n        {tooltipVisible && (\n          <div\n            className={tooltipType === 'map' ? \"map-tooltip\" : \"bubble-tooltip info\"}\n            style={{\n              position: 'absolute',\n              top: tooltipPosition.y,\n              left: tooltipPosition.x\n            }}\n          >\n            {tooltipContent}\n          </div>\n        )}\n      </div>\n    </div>\n\n  )\n};\n\nconst MainPage = () => {\n  const [currentHeading, setCurrentHeading] = useState(\"NIGERIA\");\n  const [selectedService, setSelectedService] = useState(services[0]);\n  const [selectedPopulation, setSelectedPopulation] = useState(populations[0]);\n  const [selectedLocation, setSelectedLocation] = useState(locations[0]);\n  const [selectedState, setSelectedState] = useState(states[0]);\n\n  const handleServiceChange = (service) => {\n    setSelectedService(service);\n  };\n\n  const handlePopulationChange = (population) => {\n    setSelectedPopulation(population);\n  };\n\n  const handleLocationChange = (location) => {\n    setSelectedLocation(location);\n  };\n\n\n  // Generate dynamic title based on the current filters\n  const getTitle = () => {\n    if (selectedService !== services[0]) {\n      return `Number of Providers for ${selectedService}`;\n    }\n    if (selectedPopulation !== populations[0]) {\n      return `Number of Providers for ${selectedPopulation}`;\n    }\n    if (selectedLocation !== locations[0]) {\n      return `Number of Providers in ${selectedLocation}`;\n    }\n    return 'Number of HIV Prevention Service Providers';\n  }\n\n  return (\n    <Layout pageTitle=\"MHPS 2023\">\n      <div className='holder'>\n        <Sidebar\n          selectedState={selectedState}\n          setSelectedState={setSelectedState}\n          selectedService={selectedService}\n          setSelectedService={setSelectedService}\n          selectedPopulation={selectedPopulation}\n          setSelectedPopulation={setSelectedPopulation}\n          selectedLocation={selectedLocation}\n          setSelectedLocation={setSelectedLocation}\n          onServiceChange={handleServiceChange}\n          onPopulationChange={handlePopulationChange}\n          onLocationChange={handleLocationChange}\n          showLgaDropdown={false}\n          showServicesDropdown={true}\n          showTargetPopulationDropdown={true}\n          showLocationDropdown={true}\n        />\n        <div className=\"map-header-container\">\n          <div id='current-heading-container'>\n          </div>\n          <div className=\"current-heading\">{currentHeading}</div>\n          <h4 className=\"map-title\"> {getTitle()} </h4>\n          <NationalMap\n            setCurrentHeading={setCurrentHeading}\n            selectedService={selectedService}\n            selectedPopulation={selectedPopulation}\n            selectedLocation={selectedLocation}\n          />\n        </div>\n      </div>\n    </Layout>\n\n  );\n};\n\nexport default function LayoutPage() {\n  return (\n    <div className=\"holder\">\n      <MainPage />\n    </div>\n  );\n}"],"names":["states","services","populations","locations","NationalMap","_ref","selectedService","selectedPopulation","selectedLocation","setCurrentHeading","svgRef","useRef","tooltipVisible","setTooltipVisible","useState","tooltipType","setTooltipType","tooltipContent","setTooltipContent","tooltipPosition","setTooltipPosition","x","y","serviceToColumnMap","populationToColumnMap","locationToColumnMap","useEffect","svg","d3","current","projection","scale","center","translate","path","colorScale","domain","range","Promise","all","then","_ref2","lgaGeoData","stateGeoData","serviceData","stateData","stateDataLookup","reduce","acc","row","state","aggregationColumn","countByLGA","lgaName","lga_name","count","selectAll","remove","append","data","features","enter","attr","d","properties","on","event","stateName","stateInfo","currentValue","pageX","pageY","this","urlFriendlyStateName","toLowerCase","replace","navigate","legend","legendData","map","lowerBound","invertExtent","filter","value","index","self","findIndex","v","some","arr","unshift","legendGroups","i","console","log","legendWidth","legendHeight","text","undefined","catch","error","React","className","ref","width","height","style","position","top","left","MainPage","currentHeading","setSelectedService","setSelectedPopulation","setSelectedLocation","selectedState","setSelectedState","Layout","pageTitle","Sidebar","onServiceChange","service","onPopulationChange","population","onLocationChange","location","showLgaDropdown","showServicesDropdown","showTargetPopulationDropdown","showLocationDropdown","id","LayoutPage"],"sourceRoot":""}